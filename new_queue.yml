- name: Check Printer Status on Multiple Servers
  hosts: "{{ servers }}"  # The servers provided in the survey
  gather_facts: no
  vars:
    central_server: "192.168.11.159"  # IP of the central server (Node C)
    log_dir: "/var/tmp/printer_reports"  # Centralized log directory
    timestamp: "{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}"  # Timestamp for file name
    log_retention_days: 5  # Retain logs for the last 5 days

  tasks:
    - name: Ensure log directory exists on the central server
      file:
        path: "{{ log_dir }}"
        state: directory
      delegate_to: "{{ central_server }}"

    - name: Check for configured printers
      command: lpstat -p
      register: printer_status
      ignore_errors: true

    - name: Get printer queue status
      command: lpstat -o
      register: printer_queue
      ignore_errors: true

    - name: Grab MaxJobTimeout from cupsd.conf
      command: grep -i 'MaxJobTime' /etc/cups/cupsd.conf
      register: max_job_timeout_result
      ignore_errors: true

    - name: Prepare printer status report
      set_fact:
        report: |
          ***** Printer Status Report for {{ inventory_hostname }} *******
          =======================
          
          {% if printer_status.stdout %}
          Configured Printers:
          {% for line in printer_status.stdout_lines %}
          {{ line }}
          {% endfor %}
          {% else %}
          No configured printers found.
          {% endif %}
          
          Printer Queue Status:
          =======================
          {% if printer_queue.stdout %}
          {{ printer_queue.stdout }}
          {% else %}
          No print jobs in the queue.
          {% endif %}
          
          Max Job Timeout:
          =======================
          {{ max_job_timeout }}

          ----------------------  # Separator for clarity

    - name: Save report directly to centralized server
      copy:
        content: "{{ report }}"
        dest: "{{ log_dir }}/printer_status_{{ inventory_hostname }}_{{ timestamp }}.log"
      delegate_to: "{{ central_server }}"

    - name: Compress all log files on the central server
      shell: |
        cd {{ log_dir }} && tar -czf printer_logs_{{ timestamp }}.tar.gz *.log
      delegate_to: "{{ central_server }}"

    - name: Remove uncompressed log files after compression
      file:
        path: "{{ item }}"
        state: absent
      with_fileglob: "{{ log_dir }}/*.log"
      delegate_to: "{{ central_server }}"

    - name: Cleanup logs older than 5 days
      find:
        paths: "{{ log_dir }}"
        patterns: "*.tar.gz"
        age: "{{ log_retention_days }}d"
        recurse: yes
        register: old_logs
      delegate_to: "{{ central_server }}"

    - name: Remove old logs
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ old_logs.files }}"
      delegate_to: "{{ central_server }}"
